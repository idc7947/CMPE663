
P1-Timing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080014d0  080014d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001714  08001714  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001714  08001714  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001714  08001714  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800171c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200000a4  080017c0  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  080017c0  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d06  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009d1  00000000  00000000  00022dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  000237b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000288  00000000  00000000  00023ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e074  00000000  00000000  00023d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d6c  00000000  00000000  00041db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8350  00000000  00000000  00045b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012de70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ddc  00000000  00000000  0012dec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014b8 	.word	0x080014b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080014b8 	.word	0x080014b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_Init>:
#include "GPIO.h"
#include "stm32l476xx.h"


// initializes function gen GPIO pin
void GPIO_Init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

	 // Enable clock for GPIOA peripheral
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <GPIO_Init+0x5c>)
 8000286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <GPIO_Init+0x5c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure GPIOA0 in alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f023 0303 	bic.w	r3, r3, #3
 800029e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	6013      	str	r3, [r2, #0]

	// Select the desired alternate function (AF) for the pin
	// This depends on the specific function generator and the pin's datasheet
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL0;
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	6a1b      	ldr	r3, [r3, #32]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ba:	f023 030f 	bic.w	r3, r3, #15
 80002be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (uint32_t)0x01; // Set alternate function to TIM2
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c4:	6a1b      	ldr	r3, [r3, #32]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6213      	str	r3, [r2, #32]


	return;
 80002d0:	bf00      	nop
}
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000

080002e0 <clock_init>:

//******************************************************************************************
// System boots with MSI clock enabled. Switch to HSI.
//******************************************************************************************

void clock_init(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

	// Enable the High Speed Internal oscillator (HSI)
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <clock_init+0x68>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a17      	ldr	r2, [pc, #92]	; (8000348 <clock_init+0x68>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 80002f0:	bf00      	nop
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <clock_init+0x68>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <clock_init+0x68>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <clock_init+0x68>)
 8000304:	f023 0303 	bic.w	r3, r3, #3
 8000308:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <clock_init+0x68>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <clock_init+0x68>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & RCC_CFGR_SWS) ==  RCC_CFGR_SWS_PLL) {;}
 8000316:	bf00      	nop
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <clock_init+0x68>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f003 030c 	and.w	r3, r3, #12
 8000320:	2b0c      	cmp	r3, #12
 8000322:	d0f9      	beq.n	8000318 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <clock_init+0x68>)
 8000326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <clock_init+0x68>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <clock_init+0x68>)
 8000332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <clock_init+0x68>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <main>:
//////////////////////////////////////////////////////////////
// Embedded code usually consists of 2 components
//  - The init section is run once at startup and initializes all low level drivers and modules
//  - The main loop runs forever and calls the application tasks repeatedly.
////////////////
int main(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
    clock_init();
 8000352:	f7ff ffc5 	bl	80002e0 <clock_init>
    USART2_Init(115200);
 8000356:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800035a:	f000 fa35 	bl	80007c8 <USART2_Init>
    GPIO_Init();
 800035e:	f7ff ff8f 	bl	8000280 <GPIO_Init>

    printFunct("\r\n\r\n\r\n");
 8000362:	4819      	ldr	r0, [pc, #100]	; (80003c8 <main+0x7c>)
 8000364:	f000 f904 	bl	8000570 <printFunct>
    printFunct(message);
 8000368:	4818      	ldr	r0, [pc, #96]	; (80003cc <main+0x80>)
 800036a:	f000 f901 	bl	8000570 <printFunct>


    TIM_Init();
 800036e:	f000 f9e5 	bl	800073c <TIM_Init>
//    TIM2->SR &= ~TIM_SR_CC1IF; // clear status register
//    printFunct("TEST");
    uint8_t pass = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	71fb      	strb	r3, [r7, #7]
    while( pass == 0) {
 8000376:	e00c      	b.n	8000392 <main+0x46>
    	pass = power_on_self_test();
 8000378:	f000 f834 	bl	80003e4 <power_on_self_test>
 800037c:	4603      	mov	r3, r0
 800037e:	71fb      	strb	r3, [r7, #7]
    	if (pass == 0) {
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d105      	bne.n	8000392 <main+0x46>
    		printFunct("POST Failed, hook up input to AO and press any key to try again...\r\n");
 8000386:	4812      	ldr	r0, [pc, #72]	; (80003d0 <main+0x84>)
 8000388:	f000 f8f2 	bl	8000570 <printFunct>
    		USART_Read(USART2);
 800038c:	4811      	ldr	r0, [pc, #68]	; (80003d4 <main+0x88>)
 800038e:	f000 fae7 	bl	8000960 <USART_Read>
    while( pass == 0) {
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0ef      	beq.n	8000378 <main+0x2c>
    //////////
    // Main loop runs forever
    //////////
    while(1)
    {
    	printFunct("Enter desired lower limit from 100 to 10000, or press enter \r\n");
 8000398:	480f      	ldr	r0, [pc, #60]	; (80003d8 <main+0x8c>)
 800039a:	f000 f8e9 	bl	8000570 <printFunct>
    	// 1. Print “Enter expected period or <CR> if no change”. Wait for user response
    	get_line((char*)buffer, sizeof(buffer));
 800039e:	2114      	movs	r1, #20
 80003a0:	480e      	ldr	r0, [pc, #56]	; (80003dc <main+0x90>)
 80003a2:	f000 f8f9 	bl	8000598 <get_line>


        // 3. measure 1000 pulses
		init_measurement( lower_limit );
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <main+0x94>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f83c 	bl	8000428 <init_measurement>
		make_measurements( lower_limit );
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <main+0x94>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f877 	bl	80004a8 <make_measurements>

        // 4. print time/count for non-zero counts
		print_measurements( lower_limit );
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <main+0x94>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f8a8 	bl	8000514 <print_measurements>
    	printFunct("Enter desired lower limit from 100 to 10000, or press enter \r\n");
 80003c4:	e7e8      	b.n	8000398 <main+0x4c>
 80003c6:	bf00      	nop
 80003c8:	080014d0 	.word	0x080014d0
 80003cc:	20000000 	.word	0x20000000
 80003d0:	080014d8 	.word	0x080014d8
 80003d4:	40004400 	.word	0x40004400
 80003d8:	08001520 	.word	0x08001520
 80003dc:	200001f0 	.word	0x200001f0
 80003e0:	20000034 	.word	0x20000034

080003e4 <power_on_self_test>:
// Function implementation stubs
////////////////


// runs the power on self-test. Returns true if the test passes, false otherwise
_Bool power_on_self_test( void ) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	uint32_t start_time = TIM2->CNT;
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f0:	607b      	str	r3, [r7, #4]
	  while ((TIM2->CNT - start_time) < 100) {
 80003f2:	e00b      	b.n	800040c <power_on_self_test+0x28>
//		  printFunct("Checking POST...");
	    // Check if a rising edge has been detected
		  if (TIM2->SR & TIM_SR_CC1IF) {
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	f003 0302 	and.w	r3, r3, #2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d004      	beq.n	800040c <power_on_self_test+0x28>
	    	printFunct("POST Succeeded!\r\n");
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <power_on_self_test+0x40>)
 8000404:	f000 f8b4 	bl	8000570 <printFunct>
	      return 1; // A pulse was detected, return success
 8000408:	2301      	movs	r3, #1
 800040a:	e007      	b.n	800041c <power_on_self_test+0x38>
	  while ((TIM2->CNT - start_time) < 100) {
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	2b63      	cmp	r3, #99	; 0x63
 8000418:	d9ec      	bls.n	80003f4 <power_on_self_test+0x10>
	    }
	  }
	  return 0; // No pulse was detected, return failure
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08001560 	.word	0x08001560

08000428 <init_measurement>:

// initializes all variables prior to a measurement.
int init_measurement( uint32_t limit ) {
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 101; i++) {
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e007      	b.n	8000446 <init_measurement+0x1e>
		buckets[i] = 0;
 8000436:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <init_measurement+0x38>)
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2100      	movs	r1, #0
 800043c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 101; i++) {
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	3301      	adds	r3, #1
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	2b64      	cmp	r3, #100	; 0x64
 800044a:	ddf4      	ble.n	8000436 <init_measurement+0xe>
	}
	lastCapture = 0;
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <init_measurement+0x3c>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
	return 0;
 8000452:	2300      	movs	r3, #0
}
 8000454:	4618      	mov	r0, r3
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	20000204 	.word	0x20000204
 8000464:	20000398 	.word	0x20000398

08000468 <TIM2_EdgeToEdge>:

uint32_t TIM2_EdgeToEdge(void) {
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
	while(!(TIM2->SR & TIM_SR_CC1IF)) {
 800046e:	bf00      	nop
 8000470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f8      	beq.n	8000470 <TIM2_EdgeToEdge+0x8>
		; // block until flag set
	}
	uint32_t currentCapture = TIM2->CCR1;
 800047e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000484:	607b      	str	r3, [r7, #4]
	uint32_t diff = currentCapture - lastCapture;
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <TIM2_EdgeToEdge+0x3c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	603b      	str	r3, [r7, #0]
	lastCapture = currentCapture;
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <TIM2_EdgeToEdge+0x3c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	// Clear the CC1F flag
//	TIM2->SR &= ~TIM_SR_CC1IF;
	return diff;
 8000496:	683b      	ldr	r3, [r7, #0]
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	20000398 	.word	0x20000398

080004a8 <make_measurements>:

int make_measurements( uint32_t limit ) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

	  for (int i = 0; i <= 1000; i++) { // Take 1000 measurements
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e01e      	b.n	80004f4 <make_measurements+0x4c>
		  uint32_t measurement = TIM2_EdgeToEdge();
 80004b6:	f7ff ffd7 	bl	8000468 <TIM2_EdgeToEdge>
 80004ba:	60b8      	str	r0, [r7, #8]
		  if (measurement % limit < 101) {    // 100 buckets
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	fb01 f202 	mul.w	r2, r1, r2
 80004ca:	1a9b      	subs	r3, r3, r2
 80004cc:	2b64      	cmp	r3, #100	; 0x64
 80004ce:	d80e      	bhi.n	80004ee <make_measurements+0x46>
			  buckets[measurement % limit]++;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	fb01 f202 	mul.w	r2, r1, r2
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	4a0a      	ldr	r2, [pc, #40]	; (800050c <make_measurements+0x64>)
 80004e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e6:	3201      	adds	r2, #1
 80004e8:	4908      	ldr	r1, [pc, #32]	; (800050c <make_measurements+0x64>)
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = 0; i <= 1000; i++) { // Take 1000 measurements
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fa:	dddc      	ble.n	80004b6 <make_measurements+0xe>
		  }
	  }
	  printFunct("Measurements finished. If none shown, adjust period\r\n");
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <make_measurements+0x68>)
 80004fe:	f000 f837 	bl	8000570 <printFunct>
}
 8000502:	bf00      	nop
 8000504:	4618      	mov	r0, r3
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000204 	.word	0x20000204
 8000510:	08001574 	.word	0x08001574

08000514 <print_measurements>:

// print the non-zero bucket times and counts
int print_measurements( uint32_t limit ) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 101; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e017      	b.n	8000552 <print_measurements+0x3e>
		if (buckets[i] != 0) {
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <print_measurements+0x50>)
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d00e      	beq.n	800054c <print_measurements+0x38>
			int n = sprintf(lineBuffer, "%lu %lu \r\n", i + limit, buckets[i]);
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	441a      	add	r2, r3
 8000534:	490b      	ldr	r1, [pc, #44]	; (8000564 <print_measurements+0x50>)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800053c:	490a      	ldr	r1, [pc, #40]	; (8000568 <print_measurements+0x54>)
 800053e:	480b      	ldr	r0, [pc, #44]	; (800056c <print_measurements+0x58>)
 8000540:	f000 fac0 	bl	8000ac4 <siprintf>
 8000544:	60b8      	str	r0, [r7, #8]
//			USART_Write(USART2, (uint8_t*) lineBuffer, n);
			printFunct(lineBuffer);
 8000546:	4809      	ldr	r0, [pc, #36]	; (800056c <print_measurements+0x58>)
 8000548:	f000 f812 	bl	8000570 <printFunct>
	for (int i = 0; i < 101; i++) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b64      	cmp	r3, #100	; 0x64
 8000556:	dde4      	ble.n	8000522 <print_measurements+0xe>
		}
	}
}
 8000558:	bf00      	nop
 800055a:	4618      	mov	r0, r3
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000204 	.word	0x20000204
 8000568:	080015ac 	.word	0x080015ac
 800056c:	20000158 	.word	0x20000158

08000570 <printFunct>:

void printFunct(char* printBuffer) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	USART_Write(USART2, (uint8_t*)printBuffer, strlen(printBuffer)); // simple print solution
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe29 	bl	80001d0 <strlen>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <printFunct+0x24>)
 8000586:	f000 fa00 	bl	800098a <USART_Write>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40004400 	.word	0x40004400

08000598 <get_line>:

// Captures 1 line of text from the console. Returns nul terminated string when \n is entered
void get_line ( char *bufferParam, int max_length ) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	    uint32_t length = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
	    while (length < max_length) {
 80005a6:	e018      	b.n	80005da <get_line+0x42>
	        char c = USART_Read(USART2);
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <get_line+0x5c>)
 80005aa:	f000 f9d9 	bl	8000960 <USART_Read>
 80005ae:	4603      	mov	r3, r0
 80005b0:	72fb      	strb	r3, [r7, #11]
	        char c_cast[2];
	        c_cast[0] = c;
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	723b      	strb	r3, [r7, #8]
	        c_cast[1] = '\0';    // sending single character to buffer
 80005b6:	2300      	movs	r3, #0
 80005b8:	727b      	strb	r3, [r7, #9]
	        printFunct((char*) c_cast);
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ffd6 	bl	8000570 <printFunct>
	        bufferParam[length] = c;
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	4413      	add	r3, r2
 80005ca:	7afa      	ldrb	r2, [r7, #11]
 80005cc:	701a      	strb	r2, [r3, #0]
	        length++;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]

	        if (c == '\r')
 80005d4:	7afb      	ldrb	r3, [r7, #11]
 80005d6:	2b0d      	cmp	r3, #13
 80005d8:	d004      	beq.n	80005e4 <get_line+0x4c>
	    while (length < max_length) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d3e2      	bcc.n	80005a8 <get_line+0x10>
 80005e2:	e000      	b.n	80005e6 <get_line+0x4e>
	            break;
 80005e4:	bf00      	nop
	    }
	    get_limit(bufferParam);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f000 f806 	bl	80005f8 <get_limit>
	    return;
 80005ec:	bf00      	nop
}
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40004400 	.word	0x40004400

080005f8 <get_limit>:

// Parses a line of user input into a new lower limit (unchanged if no response or invalid response)
void get_limit ( char* bufferParam) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	uint32_t proposed_limit = atoi(bufferParam);   // checks valid input
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f000 fa31 	bl	8000a68 <atoi>
 8000606:	4603      	mov	r3, r0
 8000608:	60fb      	str	r3, [r7, #12]
	if (proposed_limit >= 100 && proposed_limit <= 10000) {
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b63      	cmp	r3, #99	; 0x63
 800060e:	d916      	bls.n	800063e <get_limit+0x46>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f242 7210 	movw	r2, #10000	; 0x2710
 8000616:	4293      	cmp	r3, r2
 8000618:	d811      	bhi.n	800063e <get_limit+0x46>
		int n = sprintf(messageString, "Lower limit changed from %lu to %lu \r \n", lower_limit, proposed_limit);
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <get_limit+0x50>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	490a      	ldr	r1, [pc, #40]	; (800064c <get_limit+0x54>)
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <get_limit+0x58>)
 8000624:	f000 fa4e 	bl	8000ac4 <siprintf>
 8000628:	60b8      	str	r0, [r7, #8]
		USART_Write(USART2, (uint8_t*) messageString, n);
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	461a      	mov	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <get_limit+0x58>)
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <get_limit+0x5c>)
 8000632:	f000 f9aa 	bl	800098a <USART_Write>
		lower_limit = proposed_limit;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <get_limit+0x50>)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	6013      	str	r3, [r2, #0]

	}
	return;
 800063c:	bf00      	nop
 800063e:	bf00      	nop
}
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000034 	.word	0x20000034
 800064c:	080015b8 	.word	0x080015b8
 8000650:	200000c0 	.word	0x200000c0
 8000654:	40004400 	.word	0x40004400

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800065c:	e7fe      	b.n	800065c <NMI_Handler+0x4>

0800065e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <MemManage_Handler+0x4>

0800066a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066e:	e7fe      	b.n	800066e <BusFault_Handler+0x4>

08000670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <UsageFault_Handler+0x4>

08000676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f9cc 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <_sbrk+0x5c>)
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_sbrk+0x60>)
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <_sbrk+0x64>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <_sbrk+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d207      	bcs.n	80006ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006dc:	f000 f9c8 	bl	8000a70 <__errno>
 80006e0:	4603      	mov	r3, r0
 80006e2:	220c      	movs	r2, #12
 80006e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e009      	b.n	8000700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <_sbrk+0x64>)
 80006fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20018000 	.word	0x20018000
 800070c:	00000400 	.word	0x00000400
 8000710:	2000039c 	.word	0x2000039c
 8000714:	200003b8 	.word	0x200003b8

08000718 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <TIM_Init>:
#include "stm32l4xx_hal.h"
#define TIM2_EN 	0
static uint32_t prescaleVal = 15;

// initializes the timer (Similar to USART2_Init().  Place in timer.c)
void TIM_Init(void) {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0


	// Enable the clock for the timer peripheral
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <TIM_Init+0x84>)
 8000742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <TIM_Init+0x84>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	6593      	str	r3, [r2, #88]	; 0x58

	// Initialize the timer structure
	TIM2->PSC = prescaleVal; 				// Set the prescaler
 800074c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <TIM_Init+0x88>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6293      	str	r3, [r2, #40]	; 0x28
	TIM2->EGR |= TIM_EGR_UG;				// Init counter from 0
 8000756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6153      	str	r3, [r2, #20]


	// Initialize the input capture structure
	TIM2->CCMR1 &= (~TIM_CCMR1_CC1S_0); // Input on channel 1
 8000766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000770:	f023 0301 	bic.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= ( 1 << TIM_CCMR1_CC1S_Pos); // Input on channel 1
 8000776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
	TIM2->CCER &= ~TIM_CCER_CC1P;
 8000786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000790:	f023 0302 	bic.w	r3, r3, #2
 8000794:	6213      	str	r3, [r2, #32]
	// TIM2 peripheral is configured to capture rising edge of the input signal
	TIM2->CCER |= TIM_CCER_CC1E; // Enable input capture
 8000796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800079a:	6a1b      	ldr	r3, [r3, #32]
 800079c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6213      	str	r3, [r2, #32]

	// Enable the input capture interrupt
	//TIM2->DIER |= TIM_DIER_CC1IE;

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 80007a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]


	return;
 80007b6:	bf00      	nop
}
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	20000038 	.word	0x20000038

080007c8 <USART2_Init>:
// UART Ports:
// ===================================================
// PA.2 = USART2_TX (AF7)  |  PA.3 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	////////////  ENABLE CLOCKS	/////////////////

	// enable USART2 CLK  (for the USART2 peripheral)
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80007d0:	4b60      	ldr	r3, [pc, #384]	; (8000954 <USART2_Init+0x18c>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d4:	4a5f      	ldr	r2, [pc, #380]	; (8000954 <USART2_Init+0x18c>)
 80007d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007da:	6593      	str	r3, [r2, #88]	; 0x58

	// enable GPIOA CLK (for the GPIO port A pins)
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80007dc:	4b5d      	ldr	r3, [pc, #372]	; (8000954 <USART2_Init+0x18c>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	4a5c      	ldr	r2, [pc, #368]	; (8000954 <USART2_Init+0x18c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	64d3      	str	r3, [r2, #76]	; 0x4c

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 80007e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007f6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED2_Pos;
 80007f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000802:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000806:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_SPEED_FREQ_VERY_HIGH << GPIO_OSPEEDR_OSPEED3_Pos;
 8000808:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000816:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8000818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000822:	f023 030c 	bic.w	r3, r3, #12
 8000826:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8000828:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000836:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8000838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000846:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 8000848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000856:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 8000858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000862:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000866:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8000868:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000876:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE2_Pos;
 8000878:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000882:	f043 0320 	orr.w	r3, r3, #32
 8000886:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODE_AF_PP << GPIO_MODER_MODE3_Pos;
 8000888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000896:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <USART2_Init+0x190>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a2e      	ldr	r2, [pc, #184]	; (8000958 <USART2_Init+0x190>)
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 80008a4:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <USART2_Init+0x190>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <USART2_Init+0x190>)
 80008aa:	f423 4304 	bic.w	r3, r3, #33792	; 0x8400
 80008ae:	f023 031c 	bic.w	r3, r3, #28
 80008b2:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <USART2_Init+0x190>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a27      	ldr	r2, [pc, #156]	; (8000958 <USART2_Init+0x190>)
 80008ba:	f043 030c 	orr.w	r3, r3, #12
 80008be:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <USART2_Init+0x190>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4a24      	ldr	r2, [pc, #144]	; (8000958 <USART2_Init+0x190>)
 80008c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008ca:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <USART2_Init+0x190>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	; (8000958 <USART2_Init+0x190>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <USART2_Init+0x190>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <USART2_Init+0x190>)
 80008da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80008de:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <USART2_Init+0x190>)
 80008e2:	4a1d      	ldr	r2, [pc, #116]	; (8000958 <USART2_Init+0x190>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <USART2_Init+0x194>)
 80008ea:	60fb      	str	r3, [r7, #12]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	085a      	lsrs	r2, r3, #1
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	441a      	add	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	60bb      	str	r3, [r7, #8]
	USART2->BRR = usartdiv;
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <USART2_Init+0x190>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <USART2_Init+0x190>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <USART2_Init+0x190>)
 800090a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800090e:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <USART2_Init+0x190>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	4a10      	ldr	r2, [pc, #64]	; (8000958 <USART2_Init+0x190>)
 8000916:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800091a:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <USART2_Init+0x190>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <USART2_Init+0x190>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000928:	bf00      	nop
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <USART2_Init+0x190>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0f9      	beq.n	800092a <USART2_Init+0x162>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000936:	bf00      	nop
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <USART2_Init+0x190>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f9      	beq.n	8000938 <USART2_Init+0x170>
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000
 8000958:	40004400 	.word	0x40004400
 800095c:	00f42400 	.word	0x00f42400

08000960 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000968:	bf00      	nop
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 0320 	and.w	r3, r3, #32
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f9      	beq.n	800096a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800097a:	b29b      	uxth	r3, r3
 800097c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800098a:	b480      	push	{r7}
 800098c:	b087      	sub	sp, #28
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e010      	b.n	80009be <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 800099c:	bf00      	nop
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f9      	beq.n	800099e <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	851a      	strh	r2, [r3, #40]	; 0x28
	for (i = 0; i < nBytes; i++) {
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d8ea      	bhi.n	800099c <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 80009c6:	bf00      	nop
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f9      	beq.n	80009c8 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	61da      	str	r2, [r3, #28]
}   
 80009e0:	bf00      	nop
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff fe92 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f000 f82f 	bl	8000a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fc95 	bl	800034c <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000a30:	0800171c 	.word	0x0800171c
  ldr r2, =_sbss
 8000a34:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000a38:	200003b4 	.word	0x200003b4

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	2000003c 	.word	0x2000003c
 8000a64:	200003a0 	.word	0x200003a0

08000a68 <atoi>:
 8000a68:	220a      	movs	r2, #10
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f000 b8cc 	b.w	8000c08 <strtol>

08000a70 <__errno>:
 8000a70:	4b01      	ldr	r3, [pc, #4]	; (8000a78 <__errno+0x8>)
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000040 	.word	0x20000040

08000a7c <__libc_init_array>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	4d0d      	ldr	r5, [pc, #52]	; (8000ab4 <__libc_init_array+0x38>)
 8000a80:	4c0d      	ldr	r4, [pc, #52]	; (8000ab8 <__libc_init_array+0x3c>)
 8000a82:	1b64      	subs	r4, r4, r5
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	2600      	movs	r6, #0
 8000a88:	42a6      	cmp	r6, r4
 8000a8a:	d109      	bne.n	8000aa0 <__libc_init_array+0x24>
 8000a8c:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <__libc_init_array+0x40>)
 8000a8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ac0 <__libc_init_array+0x44>)
 8000a90:	f000 fd12 	bl	80014b8 <_init>
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	2600      	movs	r6, #0
 8000a9a:	42a6      	cmp	r6, r4
 8000a9c:	d105      	bne.n	8000aaa <__libc_init_array+0x2e>
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa4:	4798      	blx	r3
 8000aa6:	3601      	adds	r6, #1
 8000aa8:	e7ee      	b.n	8000a88 <__libc_init_array+0xc>
 8000aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aae:	4798      	blx	r3
 8000ab0:	3601      	adds	r6, #1
 8000ab2:	e7f2      	b.n	8000a9a <__libc_init_array+0x1e>
 8000ab4:	08001714 	.word	0x08001714
 8000ab8:	08001714 	.word	0x08001714
 8000abc:	08001714 	.word	0x08001714
 8000ac0:	08001718 	.word	0x08001718

08000ac4 <siprintf>:
 8000ac4:	b40e      	push	{r1, r2, r3}
 8000ac6:	b500      	push	{lr}
 8000ac8:	b09c      	sub	sp, #112	; 0x70
 8000aca:	ab1d      	add	r3, sp, #116	; 0x74
 8000acc:	9002      	str	r0, [sp, #8]
 8000ace:	9006      	str	r0, [sp, #24]
 8000ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <siprintf+0x38>)
 8000ad6:	9107      	str	r1, [sp, #28]
 8000ad8:	9104      	str	r1, [sp, #16]
 8000ada:	4909      	ldr	r1, [pc, #36]	; (8000b00 <siprintf+0x3c>)
 8000adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ae0:	9105      	str	r1, [sp, #20]
 8000ae2:	6800      	ldr	r0, [r0, #0]
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	a902      	add	r1, sp, #8
 8000ae8:	f000 f8f4 	bl	8000cd4 <_svfiprintf_r>
 8000aec:	9b02      	ldr	r3, [sp, #8]
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	b01c      	add	sp, #112	; 0x70
 8000af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000af8:	b003      	add	sp, #12
 8000afa:	4770      	bx	lr
 8000afc:	20000040 	.word	0x20000040
 8000b00:	ffff0208 	.word	0xffff0208

08000b04 <_strtol_l.constprop.0>:
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b0a:	d001      	beq.n	8000b10 <_strtol_l.constprop.0+0xc>
 8000b0c:	2b24      	cmp	r3, #36	; 0x24
 8000b0e:	d906      	bls.n	8000b1e <_strtol_l.constprop.0+0x1a>
 8000b10:	f7ff ffae 	bl	8000a70 <__errno>
 8000b14:	2316      	movs	r3, #22
 8000b16:	6003      	str	r3, [r0, #0]
 8000b18:	2000      	movs	r0, #0
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8000c04 <_strtol_l.constprop.0+0x100>
 8000b22:	460d      	mov	r5, r1
 8000b24:	462e      	mov	r6, r5
 8000b26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000b2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8000b2e:	f017 0708 	ands.w	r7, r7, #8
 8000b32:	d1f7      	bne.n	8000b24 <_strtol_l.constprop.0+0x20>
 8000b34:	2c2d      	cmp	r4, #45	; 0x2d
 8000b36:	d132      	bne.n	8000b9e <_strtol_l.constprop.0+0x9a>
 8000b38:	782c      	ldrb	r4, [r5, #0]
 8000b3a:	2701      	movs	r7, #1
 8000b3c:	1cb5      	adds	r5, r6, #2
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d05b      	beq.n	8000bfa <_strtol_l.constprop.0+0xf6>
 8000b42:	2b10      	cmp	r3, #16
 8000b44:	d109      	bne.n	8000b5a <_strtol_l.constprop.0+0x56>
 8000b46:	2c30      	cmp	r4, #48	; 0x30
 8000b48:	d107      	bne.n	8000b5a <_strtol_l.constprop.0+0x56>
 8000b4a:	782c      	ldrb	r4, [r5, #0]
 8000b4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000b50:	2c58      	cmp	r4, #88	; 0x58
 8000b52:	d14d      	bne.n	8000bf0 <_strtol_l.constprop.0+0xec>
 8000b54:	786c      	ldrb	r4, [r5, #1]
 8000b56:	2310      	movs	r3, #16
 8000b58:	3502      	adds	r5, #2
 8000b5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8000b5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8000b62:	f04f 0c00 	mov.w	ip, #0
 8000b66:	fbb8 f9f3 	udiv	r9, r8, r3
 8000b6a:	4666      	mov	r6, ip
 8000b6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8000b70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8000b74:	f1be 0f09 	cmp.w	lr, #9
 8000b78:	d816      	bhi.n	8000ba8 <_strtol_l.constprop.0+0xa4>
 8000b7a:	4674      	mov	r4, lr
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	dd24      	ble.n	8000bca <_strtol_l.constprop.0+0xc6>
 8000b80:	f1bc 0f00 	cmp.w	ip, #0
 8000b84:	db1e      	blt.n	8000bc4 <_strtol_l.constprop.0+0xc0>
 8000b86:	45b1      	cmp	r9, r6
 8000b88:	d31c      	bcc.n	8000bc4 <_strtol_l.constprop.0+0xc0>
 8000b8a:	d101      	bne.n	8000b90 <_strtol_l.constprop.0+0x8c>
 8000b8c:	45a2      	cmp	sl, r4
 8000b8e:	db19      	blt.n	8000bc4 <_strtol_l.constprop.0+0xc0>
 8000b90:	fb06 4603 	mla	r6, r6, r3, r4
 8000b94:	f04f 0c01 	mov.w	ip, #1
 8000b98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000b9c:	e7e8      	b.n	8000b70 <_strtol_l.constprop.0+0x6c>
 8000b9e:	2c2b      	cmp	r4, #43	; 0x2b
 8000ba0:	bf04      	itt	eq
 8000ba2:	782c      	ldrbeq	r4, [r5, #0]
 8000ba4:	1cb5      	addeq	r5, r6, #2
 8000ba6:	e7ca      	b.n	8000b3e <_strtol_l.constprop.0+0x3a>
 8000ba8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8000bac:	f1be 0f19 	cmp.w	lr, #25
 8000bb0:	d801      	bhi.n	8000bb6 <_strtol_l.constprop.0+0xb2>
 8000bb2:	3c37      	subs	r4, #55	; 0x37
 8000bb4:	e7e2      	b.n	8000b7c <_strtol_l.constprop.0+0x78>
 8000bb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8000bba:	f1be 0f19 	cmp.w	lr, #25
 8000bbe:	d804      	bhi.n	8000bca <_strtol_l.constprop.0+0xc6>
 8000bc0:	3c57      	subs	r4, #87	; 0x57
 8000bc2:	e7db      	b.n	8000b7c <_strtol_l.constprop.0+0x78>
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e7e6      	b.n	8000b98 <_strtol_l.constprop.0+0x94>
 8000bca:	f1bc 0f00 	cmp.w	ip, #0
 8000bce:	da05      	bge.n	8000bdc <_strtol_l.constprop.0+0xd8>
 8000bd0:	2322      	movs	r3, #34	; 0x22
 8000bd2:	6003      	str	r3, [r0, #0]
 8000bd4:	4646      	mov	r6, r8
 8000bd6:	b942      	cbnz	r2, 8000bea <_strtol_l.constprop.0+0xe6>
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e79e      	b.n	8000b1a <_strtol_l.constprop.0+0x16>
 8000bdc:	b107      	cbz	r7, 8000be0 <_strtol_l.constprop.0+0xdc>
 8000bde:	4276      	negs	r6, r6
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d0f9      	beq.n	8000bd8 <_strtol_l.constprop.0+0xd4>
 8000be4:	f1bc 0f00 	cmp.w	ip, #0
 8000be8:	d000      	beq.n	8000bec <_strtol_l.constprop.0+0xe8>
 8000bea:	1e69      	subs	r1, r5, #1
 8000bec:	6011      	str	r1, [r2, #0]
 8000bee:	e7f3      	b.n	8000bd8 <_strtol_l.constprop.0+0xd4>
 8000bf0:	2430      	movs	r4, #48	; 0x30
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1b1      	bne.n	8000b5a <_strtol_l.constprop.0+0x56>
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	e7af      	b.n	8000b5a <_strtol_l.constprop.0+0x56>
 8000bfa:	2c30      	cmp	r4, #48	; 0x30
 8000bfc:	d0a5      	beq.n	8000b4a <_strtol_l.constprop.0+0x46>
 8000bfe:	230a      	movs	r3, #10
 8000c00:	e7ab      	b.n	8000b5a <_strtol_l.constprop.0+0x56>
 8000c02:	bf00      	nop
 8000c04:	080015e1 	.word	0x080015e1

08000c08 <strtol>:
 8000c08:	4613      	mov	r3, r2
 8000c0a:	460a      	mov	r2, r1
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <strtol+0x10>)
 8000c10:	6800      	ldr	r0, [r0, #0]
 8000c12:	f7ff bf77 	b.w	8000b04 <_strtol_l.constprop.0>
 8000c16:	bf00      	nop
 8000c18:	20000040 	.word	0x20000040

08000c1c <__ssputs_r>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	688e      	ldr	r6, [r1, #8]
 8000c22:	429e      	cmp	r6, r3
 8000c24:	4682      	mov	sl, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	4690      	mov	r8, r2
 8000c2a:	461f      	mov	r7, r3
 8000c2c:	d838      	bhi.n	8000ca0 <__ssputs_r+0x84>
 8000c2e:	898a      	ldrh	r2, [r1, #12]
 8000c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c34:	d032      	beq.n	8000c9c <__ssputs_r+0x80>
 8000c36:	6825      	ldr	r5, [r4, #0]
 8000c38:	6909      	ldr	r1, [r1, #16]
 8000c3a:	eba5 0901 	sub.w	r9, r5, r1
 8000c3e:	6965      	ldr	r5, [r4, #20]
 8000c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c48:	3301      	adds	r3, #1
 8000c4a:	444b      	add	r3, r9
 8000c4c:	106d      	asrs	r5, r5, #1
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	bf38      	it	cc
 8000c52:	461d      	movcc	r5, r3
 8000c54:	0553      	lsls	r3, r2, #21
 8000c56:	d531      	bpl.n	8000cbc <__ssputs_r+0xa0>
 8000c58:	4629      	mov	r1, r5
 8000c5a:	f000 fb63 	bl	8001324 <_malloc_r>
 8000c5e:	4606      	mov	r6, r0
 8000c60:	b950      	cbnz	r0, 8000c78 <__ssputs_r+0x5c>
 8000c62:	230c      	movs	r3, #12
 8000c64:	f8ca 3000 	str.w	r3, [sl]
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6e:	81a3      	strh	r3, [r4, #12]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	6921      	ldr	r1, [r4, #16]
 8000c7a:	464a      	mov	r2, r9
 8000c7c:	f000 fabe 	bl	80011fc <memcpy>
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	81a3      	strh	r3, [r4, #12]
 8000c8c:	6126      	str	r6, [r4, #16]
 8000c8e:	6165      	str	r5, [r4, #20]
 8000c90:	444e      	add	r6, r9
 8000c92:	eba5 0509 	sub.w	r5, r5, r9
 8000c96:	6026      	str	r6, [r4, #0]
 8000c98:	60a5      	str	r5, [r4, #8]
 8000c9a:	463e      	mov	r6, r7
 8000c9c:	42be      	cmp	r6, r7
 8000c9e:	d900      	bls.n	8000ca2 <__ssputs_r+0x86>
 8000ca0:	463e      	mov	r6, r7
 8000ca2:	6820      	ldr	r0, [r4, #0]
 8000ca4:	4632      	mov	r2, r6
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	f000 fab6 	bl	8001218 <memmove>
 8000cac:	68a3      	ldr	r3, [r4, #8]
 8000cae:	1b9b      	subs	r3, r3, r6
 8000cb0:	60a3      	str	r3, [r4, #8]
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	4433      	add	r3, r6
 8000cb6:	6023      	str	r3, [r4, #0]
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e7db      	b.n	8000c74 <__ssputs_r+0x58>
 8000cbc:	462a      	mov	r2, r5
 8000cbe:	f000 fba5 	bl	800140c <_realloc_r>
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1e1      	bne.n	8000c8c <__ssputs_r+0x70>
 8000cc8:	6921      	ldr	r1, [r4, #16]
 8000cca:	4650      	mov	r0, sl
 8000ccc:	f000 fabe 	bl	800124c <_free_r>
 8000cd0:	e7c7      	b.n	8000c62 <__ssputs_r+0x46>
	...

08000cd4 <_svfiprintf_r>:
 8000cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd8:	4698      	mov	r8, r3
 8000cda:	898b      	ldrh	r3, [r1, #12]
 8000cdc:	061b      	lsls	r3, r3, #24
 8000cde:	b09d      	sub	sp, #116	; 0x74
 8000ce0:	4607      	mov	r7, r0
 8000ce2:	460d      	mov	r5, r1
 8000ce4:	4614      	mov	r4, r2
 8000ce6:	d50e      	bpl.n	8000d06 <_svfiprintf_r+0x32>
 8000ce8:	690b      	ldr	r3, [r1, #16]
 8000cea:	b963      	cbnz	r3, 8000d06 <_svfiprintf_r+0x32>
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	f000 fb19 	bl	8001324 <_malloc_r>
 8000cf2:	6028      	str	r0, [r5, #0]
 8000cf4:	6128      	str	r0, [r5, #16]
 8000cf6:	b920      	cbnz	r0, 8000d02 <_svfiprintf_r+0x2e>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	e0d1      	b.n	8000ea6 <_svfiprintf_r+0x1d2>
 8000d02:	2340      	movs	r3, #64	; 0x40
 8000d04:	616b      	str	r3, [r5, #20]
 8000d06:	2300      	movs	r3, #0
 8000d08:	9309      	str	r3, [sp, #36]	; 0x24
 8000d0a:	2320      	movs	r3, #32
 8000d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d14:	2330      	movs	r3, #48	; 0x30
 8000d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000ec0 <_svfiprintf_r+0x1ec>
 8000d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d1e:	f04f 0901 	mov.w	r9, #1
 8000d22:	4623      	mov	r3, r4
 8000d24:	469a      	mov	sl, r3
 8000d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d2a:	b10a      	cbz	r2, 8000d30 <_svfiprintf_r+0x5c>
 8000d2c:	2a25      	cmp	r2, #37	; 0x25
 8000d2e:	d1f9      	bne.n	8000d24 <_svfiprintf_r+0x50>
 8000d30:	ebba 0b04 	subs.w	fp, sl, r4
 8000d34:	d00b      	beq.n	8000d4e <_svfiprintf_r+0x7a>
 8000d36:	465b      	mov	r3, fp
 8000d38:	4622      	mov	r2, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	4638      	mov	r0, r7
 8000d3e:	f7ff ff6d 	bl	8000c1c <__ssputs_r>
 8000d42:	3001      	adds	r0, #1
 8000d44:	f000 80aa 	beq.w	8000e9c <_svfiprintf_r+0x1c8>
 8000d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d4a:	445a      	add	r2, fp
 8000d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8000d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80a2 	beq.w	8000e9c <_svfiprintf_r+0x1c8>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d62:	f10a 0a01 	add.w	sl, sl, #1
 8000d66:	9304      	str	r3, [sp, #16]
 8000d68:	9307      	str	r3, [sp, #28]
 8000d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8000d70:	4654      	mov	r4, sl
 8000d72:	2205      	movs	r2, #5
 8000d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d78:	4851      	ldr	r0, [pc, #324]	; (8000ec0 <_svfiprintf_r+0x1ec>)
 8000d7a:	f7ff fa31 	bl	80001e0 <memchr>
 8000d7e:	9a04      	ldr	r2, [sp, #16]
 8000d80:	b9d8      	cbnz	r0, 8000dba <_svfiprintf_r+0xe6>
 8000d82:	06d0      	lsls	r0, r2, #27
 8000d84:	bf44      	itt	mi
 8000d86:	2320      	movmi	r3, #32
 8000d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d8c:	0711      	lsls	r1, r2, #28
 8000d8e:	bf44      	itt	mi
 8000d90:	232b      	movmi	r3, #43	; 0x2b
 8000d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d96:	f89a 3000 	ldrb.w	r3, [sl]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d015      	beq.n	8000dca <_svfiprintf_r+0xf6>
 8000d9e:	9a07      	ldr	r2, [sp, #28]
 8000da0:	4654      	mov	r4, sl
 8000da2:	2000      	movs	r0, #0
 8000da4:	f04f 0c0a 	mov.w	ip, #10
 8000da8:	4621      	mov	r1, r4
 8000daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dae:	3b30      	subs	r3, #48	; 0x30
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d94e      	bls.n	8000e52 <_svfiprintf_r+0x17e>
 8000db4:	b1b0      	cbz	r0, 8000de4 <_svfiprintf_r+0x110>
 8000db6:	9207      	str	r2, [sp, #28]
 8000db8:	e014      	b.n	8000de4 <_svfiprintf_r+0x110>
 8000dba:	eba0 0308 	sub.w	r3, r0, r8
 8000dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	9304      	str	r3, [sp, #16]
 8000dc6:	46a2      	mov	sl, r4
 8000dc8:	e7d2      	b.n	8000d70 <_svfiprintf_r+0x9c>
 8000dca:	9b03      	ldr	r3, [sp, #12]
 8000dcc:	1d19      	adds	r1, r3, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	9103      	str	r1, [sp, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	bfbb      	ittet	lt
 8000dd6:	425b      	neglt	r3, r3
 8000dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8000ddc:	9307      	strge	r3, [sp, #28]
 8000dde:	9307      	strlt	r3, [sp, #28]
 8000de0:	bfb8      	it	lt
 8000de2:	9204      	strlt	r2, [sp, #16]
 8000de4:	7823      	ldrb	r3, [r4, #0]
 8000de6:	2b2e      	cmp	r3, #46	; 0x2e
 8000de8:	d10c      	bne.n	8000e04 <_svfiprintf_r+0x130>
 8000dea:	7863      	ldrb	r3, [r4, #1]
 8000dec:	2b2a      	cmp	r3, #42	; 0x2a
 8000dee:	d135      	bne.n	8000e5c <_svfiprintf_r+0x188>
 8000df0:	9b03      	ldr	r3, [sp, #12]
 8000df2:	1d1a      	adds	r2, r3, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	9203      	str	r2, [sp, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bfb8      	it	lt
 8000dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e00:	3402      	adds	r4, #2
 8000e02:	9305      	str	r3, [sp, #20]
 8000e04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ed0 <_svfiprintf_r+0x1fc>
 8000e08:	7821      	ldrb	r1, [r4, #0]
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	4650      	mov	r0, sl
 8000e0e:	f7ff f9e7 	bl	80001e0 <memchr>
 8000e12:	b140      	cbz	r0, 8000e26 <_svfiprintf_r+0x152>
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	eba0 000a 	sub.w	r0, r0, sl
 8000e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8000e1e:	9b04      	ldr	r3, [sp, #16]
 8000e20:	4303      	orrs	r3, r0
 8000e22:	3401      	adds	r4, #1
 8000e24:	9304      	str	r3, [sp, #16]
 8000e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e2a:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <_svfiprintf_r+0x1f0>)
 8000e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e30:	2206      	movs	r2, #6
 8000e32:	f7ff f9d5 	bl	80001e0 <memchr>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d038      	beq.n	8000eac <_svfiprintf_r+0x1d8>
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <_svfiprintf_r+0x1f4>)
 8000e3c:	bb1b      	cbnz	r3, 8000e86 <_svfiprintf_r+0x1b2>
 8000e3e:	9b03      	ldr	r3, [sp, #12]
 8000e40:	3307      	adds	r3, #7
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	3308      	adds	r3, #8
 8000e48:	9303      	str	r3, [sp, #12]
 8000e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e4c:	4433      	add	r3, r6
 8000e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e50:	e767      	b.n	8000d22 <_svfiprintf_r+0x4e>
 8000e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e56:	460c      	mov	r4, r1
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e7a5      	b.n	8000da8 <_svfiprintf_r+0xd4>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	3401      	adds	r4, #1
 8000e60:	9305      	str	r3, [sp, #20]
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 0c0a 	mov.w	ip, #10
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e6e:	3a30      	subs	r2, #48	; 0x30
 8000e70:	2a09      	cmp	r2, #9
 8000e72:	d903      	bls.n	8000e7c <_svfiprintf_r+0x1a8>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0c5      	beq.n	8000e04 <_svfiprintf_r+0x130>
 8000e78:	9105      	str	r1, [sp, #20]
 8000e7a:	e7c3      	b.n	8000e04 <_svfiprintf_r+0x130>
 8000e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e80:	4604      	mov	r4, r0
 8000e82:	2301      	movs	r3, #1
 8000e84:	e7f0      	b.n	8000e68 <_svfiprintf_r+0x194>
 8000e86:	ab03      	add	r3, sp, #12
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	462a      	mov	r2, r5
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <_svfiprintf_r+0x1f8>)
 8000e8e:	a904      	add	r1, sp, #16
 8000e90:	4638      	mov	r0, r7
 8000e92:	f3af 8000 	nop.w
 8000e96:	1c42      	adds	r2, r0, #1
 8000e98:	4606      	mov	r6, r0
 8000e9a:	d1d6      	bne.n	8000e4a <_svfiprintf_r+0x176>
 8000e9c:	89ab      	ldrh	r3, [r5, #12]
 8000e9e:	065b      	lsls	r3, r3, #25
 8000ea0:	f53f af2c 	bmi.w	8000cfc <_svfiprintf_r+0x28>
 8000ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ea6:	b01d      	add	sp, #116	; 0x74
 8000ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000eac:	ab03      	add	r3, sp, #12
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	462a      	mov	r2, r5
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <_svfiprintf_r+0x1f8>)
 8000eb4:	a904      	add	r1, sp, #16
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	f000 f87a 	bl	8000fb0 <_printf_i>
 8000ebc:	e7eb      	b.n	8000e96 <_svfiprintf_r+0x1c2>
 8000ebe:	bf00      	nop
 8000ec0:	080016e1 	.word	0x080016e1
 8000ec4:	080016eb 	.word	0x080016eb
 8000ec8:	00000000 	.word	0x00000000
 8000ecc:	08000c1d 	.word	0x08000c1d
 8000ed0:	080016e7 	.word	0x080016e7

08000ed4 <_printf_common>:
 8000ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed8:	4616      	mov	r6, r2
 8000eda:	4699      	mov	r9, r3
 8000edc:	688a      	ldr	r2, [r1, #8]
 8000ede:	690b      	ldr	r3, [r1, #16]
 8000ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	bfb8      	it	lt
 8000ee8:	4613      	movlt	r3, r2
 8000eea:	6033      	str	r3, [r6, #0]
 8000eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ef0:	4607      	mov	r7, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	b10a      	cbz	r2, 8000efa <_printf_common+0x26>
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	6033      	str	r3, [r6, #0]
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	0699      	lsls	r1, r3, #26
 8000efe:	bf42      	ittt	mi
 8000f00:	6833      	ldrmi	r3, [r6, #0]
 8000f02:	3302      	addmi	r3, #2
 8000f04:	6033      	strmi	r3, [r6, #0]
 8000f06:	6825      	ldr	r5, [r4, #0]
 8000f08:	f015 0506 	ands.w	r5, r5, #6
 8000f0c:	d106      	bne.n	8000f1c <_printf_common+0x48>
 8000f0e:	f104 0a19 	add.w	sl, r4, #25
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	6832      	ldr	r2, [r6, #0]
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	dc26      	bgt.n	8000f6a <_printf_common+0x96>
 8000f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f20:	1e13      	subs	r3, r2, #0
 8000f22:	6822      	ldr	r2, [r4, #0]
 8000f24:	bf18      	it	ne
 8000f26:	2301      	movne	r3, #1
 8000f28:	0692      	lsls	r2, r2, #26
 8000f2a:	d42b      	bmi.n	8000f84 <_printf_common+0xb0>
 8000f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f30:	4649      	mov	r1, r9
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c0      	blx	r8
 8000f36:	3001      	adds	r0, #1
 8000f38:	d01e      	beq.n	8000f78 <_printf_common+0xa4>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	68e5      	ldr	r5, [r4, #12]
 8000f3e:	6832      	ldr	r2, [r6, #0]
 8000f40:	f003 0306 	and.w	r3, r3, #6
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	bf08      	it	eq
 8000f48:	1aad      	subeq	r5, r5, r2
 8000f4a:	68a3      	ldr	r3, [r4, #8]
 8000f4c:	6922      	ldr	r2, [r4, #16]
 8000f4e:	bf0c      	ite	eq
 8000f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f54:	2500      	movne	r5, #0
 8000f56:	4293      	cmp	r3, r2
 8000f58:	bfc4      	itt	gt
 8000f5a:	1a9b      	subgt	r3, r3, r2
 8000f5c:	18ed      	addgt	r5, r5, r3
 8000f5e:	2600      	movs	r6, #0
 8000f60:	341a      	adds	r4, #26
 8000f62:	42b5      	cmp	r5, r6
 8000f64:	d11a      	bne.n	8000f9c <_printf_common+0xc8>
 8000f66:	2000      	movs	r0, #0
 8000f68:	e008      	b.n	8000f7c <_printf_common+0xa8>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	4652      	mov	r2, sl
 8000f6e:	4649      	mov	r1, r9
 8000f70:	4638      	mov	r0, r7
 8000f72:	47c0      	blx	r8
 8000f74:	3001      	adds	r0, #1
 8000f76:	d103      	bne.n	8000f80 <_printf_common+0xac>
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f80:	3501      	adds	r5, #1
 8000f82:	e7c6      	b.n	8000f12 <_printf_common+0x3e>
 8000f84:	18e1      	adds	r1, r4, r3
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	2030      	movs	r0, #48	; 0x30
 8000f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f8e:	4422      	add	r2, r4
 8000f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f98:	3302      	adds	r3, #2
 8000f9a:	e7c7      	b.n	8000f2c <_printf_common+0x58>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4622      	mov	r2, r4
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	47c0      	blx	r8
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d0e6      	beq.n	8000f78 <_printf_common+0xa4>
 8000faa:	3601      	adds	r6, #1
 8000fac:	e7d9      	b.n	8000f62 <_printf_common+0x8e>
	...

08000fb0 <_printf_i>:
 8000fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb4:	7e0f      	ldrb	r7, [r1, #24]
 8000fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000fb8:	2f78      	cmp	r7, #120	; 0x78
 8000fba:	4691      	mov	r9, r2
 8000fbc:	4680      	mov	r8, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000fc6:	d807      	bhi.n	8000fd8 <_printf_i+0x28>
 8000fc8:	2f62      	cmp	r7, #98	; 0x62
 8000fca:	d80a      	bhi.n	8000fe2 <_printf_i+0x32>
 8000fcc:	2f00      	cmp	r7, #0
 8000fce:	f000 80d8 	beq.w	8001182 <_printf_i+0x1d2>
 8000fd2:	2f58      	cmp	r7, #88	; 0x58
 8000fd4:	f000 80a3 	beq.w	800111e <_printf_i+0x16e>
 8000fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000fe0:	e03a      	b.n	8001058 <_printf_i+0xa8>
 8000fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000fe6:	2b15      	cmp	r3, #21
 8000fe8:	d8f6      	bhi.n	8000fd8 <_printf_i+0x28>
 8000fea:	a101      	add	r1, pc, #4	; (adr r1, 8000ff0 <_printf_i+0x40>)
 8000fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	0800105d 	.word	0x0800105d
 8000ff8:	08000fd9 	.word	0x08000fd9
 8000ffc:	08000fd9 	.word	0x08000fd9
 8001000:	08000fd9 	.word	0x08000fd9
 8001004:	08000fd9 	.word	0x08000fd9
 8001008:	0800105d 	.word	0x0800105d
 800100c:	08000fd9 	.word	0x08000fd9
 8001010:	08000fd9 	.word	0x08000fd9
 8001014:	08000fd9 	.word	0x08000fd9
 8001018:	08000fd9 	.word	0x08000fd9
 800101c:	08001169 	.word	0x08001169
 8001020:	0800108d 	.word	0x0800108d
 8001024:	0800114b 	.word	0x0800114b
 8001028:	08000fd9 	.word	0x08000fd9
 800102c:	08000fd9 	.word	0x08000fd9
 8001030:	0800118b 	.word	0x0800118b
 8001034:	08000fd9 	.word	0x08000fd9
 8001038:	0800108d 	.word	0x0800108d
 800103c:	08000fd9 	.word	0x08000fd9
 8001040:	08000fd9 	.word	0x08000fd9
 8001044:	08001153 	.word	0x08001153
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	1d1a      	adds	r2, r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	602a      	str	r2, [r5, #0]
 8001050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001058:	2301      	movs	r3, #1
 800105a:	e0a3      	b.n	80011a4 <_printf_i+0x1f4>
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	6829      	ldr	r1, [r5, #0]
 8001060:	0606      	lsls	r6, r0, #24
 8001062:	f101 0304 	add.w	r3, r1, #4
 8001066:	d50a      	bpl.n	800107e <_printf_i+0xce>
 8001068:	680e      	ldr	r6, [r1, #0]
 800106a:	602b      	str	r3, [r5, #0]
 800106c:	2e00      	cmp	r6, #0
 800106e:	da03      	bge.n	8001078 <_printf_i+0xc8>
 8001070:	232d      	movs	r3, #45	; 0x2d
 8001072:	4276      	negs	r6, r6
 8001074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001078:	485e      	ldr	r0, [pc, #376]	; (80011f4 <_printf_i+0x244>)
 800107a:	230a      	movs	r3, #10
 800107c:	e019      	b.n	80010b2 <_printf_i+0x102>
 800107e:	680e      	ldr	r6, [r1, #0]
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001086:	bf18      	it	ne
 8001088:	b236      	sxthne	r6, r6
 800108a:	e7ef      	b.n	800106c <_printf_i+0xbc>
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	6820      	ldr	r0, [r4, #0]
 8001090:	1d19      	adds	r1, r3, #4
 8001092:	6029      	str	r1, [r5, #0]
 8001094:	0601      	lsls	r1, r0, #24
 8001096:	d501      	bpl.n	800109c <_printf_i+0xec>
 8001098:	681e      	ldr	r6, [r3, #0]
 800109a:	e002      	b.n	80010a2 <_printf_i+0xf2>
 800109c:	0646      	lsls	r6, r0, #25
 800109e:	d5fb      	bpl.n	8001098 <_printf_i+0xe8>
 80010a0:	881e      	ldrh	r6, [r3, #0]
 80010a2:	4854      	ldr	r0, [pc, #336]	; (80011f4 <_printf_i+0x244>)
 80010a4:	2f6f      	cmp	r7, #111	; 0x6f
 80010a6:	bf0c      	ite	eq
 80010a8:	2308      	moveq	r3, #8
 80010aa:	230a      	movne	r3, #10
 80010ac:	2100      	movs	r1, #0
 80010ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80010b2:	6865      	ldr	r5, [r4, #4]
 80010b4:	60a5      	str	r5, [r4, #8]
 80010b6:	2d00      	cmp	r5, #0
 80010b8:	bfa2      	ittt	ge
 80010ba:	6821      	ldrge	r1, [r4, #0]
 80010bc:	f021 0104 	bicge.w	r1, r1, #4
 80010c0:	6021      	strge	r1, [r4, #0]
 80010c2:	b90e      	cbnz	r6, 80010c8 <_printf_i+0x118>
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	d04d      	beq.n	8001164 <_printf_i+0x1b4>
 80010c8:	4615      	mov	r5, r2
 80010ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80010ce:	fb03 6711 	mls	r7, r3, r1, r6
 80010d2:	5dc7      	ldrb	r7, [r0, r7]
 80010d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80010d8:	4637      	mov	r7, r6
 80010da:	42bb      	cmp	r3, r7
 80010dc:	460e      	mov	r6, r1
 80010de:	d9f4      	bls.n	80010ca <_printf_i+0x11a>
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d10b      	bne.n	80010fc <_printf_i+0x14c>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	07de      	lsls	r6, r3, #31
 80010e8:	d508      	bpl.n	80010fc <_printf_i+0x14c>
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	6861      	ldr	r1, [r4, #4]
 80010ee:	4299      	cmp	r1, r3
 80010f0:	bfde      	ittt	le
 80010f2:	2330      	movle	r3, #48	; 0x30
 80010f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010fc:	1b52      	subs	r2, r2, r5
 80010fe:	6122      	str	r2, [r4, #16]
 8001100:	f8cd a000 	str.w	sl, [sp]
 8001104:	464b      	mov	r3, r9
 8001106:	aa03      	add	r2, sp, #12
 8001108:	4621      	mov	r1, r4
 800110a:	4640      	mov	r0, r8
 800110c:	f7ff fee2 	bl	8000ed4 <_printf_common>
 8001110:	3001      	adds	r0, #1
 8001112:	d14c      	bne.n	80011ae <_printf_i+0x1fe>
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	b004      	add	sp, #16
 800111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800111e:	4835      	ldr	r0, [pc, #212]	; (80011f4 <_printf_i+0x244>)
 8001120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001124:	6829      	ldr	r1, [r5, #0]
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f851 6b04 	ldr.w	r6, [r1], #4
 800112c:	6029      	str	r1, [r5, #0]
 800112e:	061d      	lsls	r5, r3, #24
 8001130:	d514      	bpl.n	800115c <_printf_i+0x1ac>
 8001132:	07df      	lsls	r7, r3, #31
 8001134:	bf44      	itt	mi
 8001136:	f043 0320 	orrmi.w	r3, r3, #32
 800113a:	6023      	strmi	r3, [r4, #0]
 800113c:	b91e      	cbnz	r6, 8001146 <_printf_i+0x196>
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	f023 0320 	bic.w	r3, r3, #32
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	2310      	movs	r3, #16
 8001148:	e7b0      	b.n	80010ac <_printf_i+0xfc>
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	f043 0320 	orr.w	r3, r3, #32
 8001150:	6023      	str	r3, [r4, #0]
 8001152:	2378      	movs	r3, #120	; 0x78
 8001154:	4828      	ldr	r0, [pc, #160]	; (80011f8 <_printf_i+0x248>)
 8001156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800115a:	e7e3      	b.n	8001124 <_printf_i+0x174>
 800115c:	0659      	lsls	r1, r3, #25
 800115e:	bf48      	it	mi
 8001160:	b2b6      	uxthmi	r6, r6
 8001162:	e7e6      	b.n	8001132 <_printf_i+0x182>
 8001164:	4615      	mov	r5, r2
 8001166:	e7bb      	b.n	80010e0 <_printf_i+0x130>
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	6826      	ldr	r6, [r4, #0]
 800116c:	6961      	ldr	r1, [r4, #20]
 800116e:	1d18      	adds	r0, r3, #4
 8001170:	6028      	str	r0, [r5, #0]
 8001172:	0635      	lsls	r5, r6, #24
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	d501      	bpl.n	800117c <_printf_i+0x1cc>
 8001178:	6019      	str	r1, [r3, #0]
 800117a:	e002      	b.n	8001182 <_printf_i+0x1d2>
 800117c:	0670      	lsls	r0, r6, #25
 800117e:	d5fb      	bpl.n	8001178 <_printf_i+0x1c8>
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	6123      	str	r3, [r4, #16]
 8001186:	4615      	mov	r5, r2
 8001188:	e7ba      	b.n	8001100 <_printf_i+0x150>
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	1d1a      	adds	r2, r3, #4
 800118e:	602a      	str	r2, [r5, #0]
 8001190:	681d      	ldr	r5, [r3, #0]
 8001192:	6862      	ldr	r2, [r4, #4]
 8001194:	2100      	movs	r1, #0
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff f822 	bl	80001e0 <memchr>
 800119c:	b108      	cbz	r0, 80011a2 <_printf_i+0x1f2>
 800119e:	1b40      	subs	r0, r0, r5
 80011a0:	6060      	str	r0, [r4, #4]
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	6123      	str	r3, [r4, #16]
 80011a6:	2300      	movs	r3, #0
 80011a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011ac:	e7a8      	b.n	8001100 <_printf_i+0x150>
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	462a      	mov	r2, r5
 80011b2:	4649      	mov	r1, r9
 80011b4:	4640      	mov	r0, r8
 80011b6:	47d0      	blx	sl
 80011b8:	3001      	adds	r0, #1
 80011ba:	d0ab      	beq.n	8001114 <_printf_i+0x164>
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	079b      	lsls	r3, r3, #30
 80011c0:	d413      	bmi.n	80011ea <_printf_i+0x23a>
 80011c2:	68e0      	ldr	r0, [r4, #12]
 80011c4:	9b03      	ldr	r3, [sp, #12]
 80011c6:	4298      	cmp	r0, r3
 80011c8:	bfb8      	it	lt
 80011ca:	4618      	movlt	r0, r3
 80011cc:	e7a4      	b.n	8001118 <_printf_i+0x168>
 80011ce:	2301      	movs	r3, #1
 80011d0:	4632      	mov	r2, r6
 80011d2:	4649      	mov	r1, r9
 80011d4:	4640      	mov	r0, r8
 80011d6:	47d0      	blx	sl
 80011d8:	3001      	adds	r0, #1
 80011da:	d09b      	beq.n	8001114 <_printf_i+0x164>
 80011dc:	3501      	adds	r5, #1
 80011de:	68e3      	ldr	r3, [r4, #12]
 80011e0:	9903      	ldr	r1, [sp, #12]
 80011e2:	1a5b      	subs	r3, r3, r1
 80011e4:	42ab      	cmp	r3, r5
 80011e6:	dcf2      	bgt.n	80011ce <_printf_i+0x21e>
 80011e8:	e7eb      	b.n	80011c2 <_printf_i+0x212>
 80011ea:	2500      	movs	r5, #0
 80011ec:	f104 0619 	add.w	r6, r4, #25
 80011f0:	e7f5      	b.n	80011de <_printf_i+0x22e>
 80011f2:	bf00      	nop
 80011f4:	080016f2 	.word	0x080016f2
 80011f8:	08001703 	.word	0x08001703

080011fc <memcpy>:
 80011fc:	440a      	add	r2, r1
 80011fe:	4291      	cmp	r1, r2
 8001200:	f100 33ff 	add.w	r3, r0, #4294967295
 8001204:	d100      	bne.n	8001208 <memcpy+0xc>
 8001206:	4770      	bx	lr
 8001208:	b510      	push	{r4, lr}
 800120a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800120e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001212:	4291      	cmp	r1, r2
 8001214:	d1f9      	bne.n	800120a <memcpy+0xe>
 8001216:	bd10      	pop	{r4, pc}

08001218 <memmove>:
 8001218:	4288      	cmp	r0, r1
 800121a:	b510      	push	{r4, lr}
 800121c:	eb01 0402 	add.w	r4, r1, r2
 8001220:	d902      	bls.n	8001228 <memmove+0x10>
 8001222:	4284      	cmp	r4, r0
 8001224:	4623      	mov	r3, r4
 8001226:	d807      	bhi.n	8001238 <memmove+0x20>
 8001228:	1e43      	subs	r3, r0, #1
 800122a:	42a1      	cmp	r1, r4
 800122c:	d008      	beq.n	8001240 <memmove+0x28>
 800122e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001232:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001236:	e7f8      	b.n	800122a <memmove+0x12>
 8001238:	4402      	add	r2, r0
 800123a:	4601      	mov	r1, r0
 800123c:	428a      	cmp	r2, r1
 800123e:	d100      	bne.n	8001242 <memmove+0x2a>
 8001240:	bd10      	pop	{r4, pc}
 8001242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001246:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800124a:	e7f7      	b.n	800123c <memmove+0x24>

0800124c <_free_r>:
 800124c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800124e:	2900      	cmp	r1, #0
 8001250:	d044      	beq.n	80012dc <_free_r+0x90>
 8001252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001256:	9001      	str	r0, [sp, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f1a1 0404 	sub.w	r4, r1, #4
 800125e:	bfb8      	it	lt
 8001260:	18e4      	addlt	r4, r4, r3
 8001262:	f000 f913 	bl	800148c <__malloc_lock>
 8001266:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <_free_r+0x94>)
 8001268:	9801      	ldr	r0, [sp, #4]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	b933      	cbnz	r3, 800127c <_free_r+0x30>
 800126e:	6063      	str	r3, [r4, #4]
 8001270:	6014      	str	r4, [r2, #0]
 8001272:	b003      	add	sp, #12
 8001274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001278:	f000 b90e 	b.w	8001498 <__malloc_unlock>
 800127c:	42a3      	cmp	r3, r4
 800127e:	d908      	bls.n	8001292 <_free_r+0x46>
 8001280:	6825      	ldr	r5, [r4, #0]
 8001282:	1961      	adds	r1, r4, r5
 8001284:	428b      	cmp	r3, r1
 8001286:	bf01      	itttt	eq
 8001288:	6819      	ldreq	r1, [r3, #0]
 800128a:	685b      	ldreq	r3, [r3, #4]
 800128c:	1949      	addeq	r1, r1, r5
 800128e:	6021      	streq	r1, [r4, #0]
 8001290:	e7ed      	b.n	800126e <_free_r+0x22>
 8001292:	461a      	mov	r2, r3
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	b10b      	cbz	r3, 800129c <_free_r+0x50>
 8001298:	42a3      	cmp	r3, r4
 800129a:	d9fa      	bls.n	8001292 <_free_r+0x46>
 800129c:	6811      	ldr	r1, [r2, #0]
 800129e:	1855      	adds	r5, r2, r1
 80012a0:	42a5      	cmp	r5, r4
 80012a2:	d10b      	bne.n	80012bc <_free_r+0x70>
 80012a4:	6824      	ldr	r4, [r4, #0]
 80012a6:	4421      	add	r1, r4
 80012a8:	1854      	adds	r4, r2, r1
 80012aa:	42a3      	cmp	r3, r4
 80012ac:	6011      	str	r1, [r2, #0]
 80012ae:	d1e0      	bne.n	8001272 <_free_r+0x26>
 80012b0:	681c      	ldr	r4, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	6053      	str	r3, [r2, #4]
 80012b6:	4421      	add	r1, r4
 80012b8:	6011      	str	r1, [r2, #0]
 80012ba:	e7da      	b.n	8001272 <_free_r+0x26>
 80012bc:	d902      	bls.n	80012c4 <_free_r+0x78>
 80012be:	230c      	movs	r3, #12
 80012c0:	6003      	str	r3, [r0, #0]
 80012c2:	e7d6      	b.n	8001272 <_free_r+0x26>
 80012c4:	6825      	ldr	r5, [r4, #0]
 80012c6:	1961      	adds	r1, r4, r5
 80012c8:	428b      	cmp	r3, r1
 80012ca:	bf04      	itt	eq
 80012cc:	6819      	ldreq	r1, [r3, #0]
 80012ce:	685b      	ldreq	r3, [r3, #4]
 80012d0:	6063      	str	r3, [r4, #4]
 80012d2:	bf04      	itt	eq
 80012d4:	1949      	addeq	r1, r1, r5
 80012d6:	6021      	streq	r1, [r4, #0]
 80012d8:	6054      	str	r4, [r2, #4]
 80012da:	e7ca      	b.n	8001272 <_free_r+0x26>
 80012dc:	b003      	add	sp, #12
 80012de:	bd30      	pop	{r4, r5, pc}
 80012e0:	200003a4 	.word	0x200003a4

080012e4 <sbrk_aligned>:
 80012e4:	b570      	push	{r4, r5, r6, lr}
 80012e6:	4e0e      	ldr	r6, [pc, #56]	; (8001320 <sbrk_aligned+0x3c>)
 80012e8:	460c      	mov	r4, r1
 80012ea:	6831      	ldr	r1, [r6, #0]
 80012ec:	4605      	mov	r5, r0
 80012ee:	b911      	cbnz	r1, 80012f6 <sbrk_aligned+0x12>
 80012f0:	f000 f8bc 	bl	800146c <_sbrk_r>
 80012f4:	6030      	str	r0, [r6, #0]
 80012f6:	4621      	mov	r1, r4
 80012f8:	4628      	mov	r0, r5
 80012fa:	f000 f8b7 	bl	800146c <_sbrk_r>
 80012fe:	1c43      	adds	r3, r0, #1
 8001300:	d00a      	beq.n	8001318 <sbrk_aligned+0x34>
 8001302:	1cc4      	adds	r4, r0, #3
 8001304:	f024 0403 	bic.w	r4, r4, #3
 8001308:	42a0      	cmp	r0, r4
 800130a:	d007      	beq.n	800131c <sbrk_aligned+0x38>
 800130c:	1a21      	subs	r1, r4, r0
 800130e:	4628      	mov	r0, r5
 8001310:	f000 f8ac 	bl	800146c <_sbrk_r>
 8001314:	3001      	adds	r0, #1
 8001316:	d101      	bne.n	800131c <sbrk_aligned+0x38>
 8001318:	f04f 34ff 	mov.w	r4, #4294967295
 800131c:	4620      	mov	r0, r4
 800131e:	bd70      	pop	{r4, r5, r6, pc}
 8001320:	200003a8 	.word	0x200003a8

08001324 <_malloc_r>:
 8001324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001328:	1ccd      	adds	r5, r1, #3
 800132a:	f025 0503 	bic.w	r5, r5, #3
 800132e:	3508      	adds	r5, #8
 8001330:	2d0c      	cmp	r5, #12
 8001332:	bf38      	it	cc
 8001334:	250c      	movcc	r5, #12
 8001336:	2d00      	cmp	r5, #0
 8001338:	4607      	mov	r7, r0
 800133a:	db01      	blt.n	8001340 <_malloc_r+0x1c>
 800133c:	42a9      	cmp	r1, r5
 800133e:	d905      	bls.n	800134c <_malloc_r+0x28>
 8001340:	230c      	movs	r3, #12
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	2600      	movs	r6, #0
 8001346:	4630      	mov	r0, r6
 8001348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134c:	4e2e      	ldr	r6, [pc, #184]	; (8001408 <_malloc_r+0xe4>)
 800134e:	f000 f89d 	bl	800148c <__malloc_lock>
 8001352:	6833      	ldr	r3, [r6, #0]
 8001354:	461c      	mov	r4, r3
 8001356:	bb34      	cbnz	r4, 80013a6 <_malloc_r+0x82>
 8001358:	4629      	mov	r1, r5
 800135a:	4638      	mov	r0, r7
 800135c:	f7ff ffc2 	bl	80012e4 <sbrk_aligned>
 8001360:	1c43      	adds	r3, r0, #1
 8001362:	4604      	mov	r4, r0
 8001364:	d14d      	bne.n	8001402 <_malloc_r+0xde>
 8001366:	6834      	ldr	r4, [r6, #0]
 8001368:	4626      	mov	r6, r4
 800136a:	2e00      	cmp	r6, #0
 800136c:	d140      	bne.n	80013f0 <_malloc_r+0xcc>
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	4631      	mov	r1, r6
 8001372:	4638      	mov	r0, r7
 8001374:	eb04 0803 	add.w	r8, r4, r3
 8001378:	f000 f878 	bl	800146c <_sbrk_r>
 800137c:	4580      	cmp	r8, r0
 800137e:	d13a      	bne.n	80013f6 <_malloc_r+0xd2>
 8001380:	6821      	ldr	r1, [r4, #0]
 8001382:	3503      	adds	r5, #3
 8001384:	1a6d      	subs	r5, r5, r1
 8001386:	f025 0503 	bic.w	r5, r5, #3
 800138a:	3508      	adds	r5, #8
 800138c:	2d0c      	cmp	r5, #12
 800138e:	bf38      	it	cc
 8001390:	250c      	movcc	r5, #12
 8001392:	4629      	mov	r1, r5
 8001394:	4638      	mov	r0, r7
 8001396:	f7ff ffa5 	bl	80012e4 <sbrk_aligned>
 800139a:	3001      	adds	r0, #1
 800139c:	d02b      	beq.n	80013f6 <_malloc_r+0xd2>
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	442b      	add	r3, r5
 80013a2:	6023      	str	r3, [r4, #0]
 80013a4:	e00e      	b.n	80013c4 <_malloc_r+0xa0>
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	1b52      	subs	r2, r2, r5
 80013aa:	d41e      	bmi.n	80013ea <_malloc_r+0xc6>
 80013ac:	2a0b      	cmp	r2, #11
 80013ae:	d916      	bls.n	80013de <_malloc_r+0xba>
 80013b0:	1961      	adds	r1, r4, r5
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	6025      	str	r5, [r4, #0]
 80013b6:	bf18      	it	ne
 80013b8:	6059      	strne	r1, [r3, #4]
 80013ba:	6863      	ldr	r3, [r4, #4]
 80013bc:	bf08      	it	eq
 80013be:	6031      	streq	r1, [r6, #0]
 80013c0:	5162      	str	r2, [r4, r5]
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	4638      	mov	r0, r7
 80013c6:	f104 060b 	add.w	r6, r4, #11
 80013ca:	f000 f865 	bl	8001498 <__malloc_unlock>
 80013ce:	f026 0607 	bic.w	r6, r6, #7
 80013d2:	1d23      	adds	r3, r4, #4
 80013d4:	1af2      	subs	r2, r6, r3
 80013d6:	d0b6      	beq.n	8001346 <_malloc_r+0x22>
 80013d8:	1b9b      	subs	r3, r3, r6
 80013da:	50a3      	str	r3, [r4, r2]
 80013dc:	e7b3      	b.n	8001346 <_malloc_r+0x22>
 80013de:	6862      	ldr	r2, [r4, #4]
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	bf0c      	ite	eq
 80013e4:	6032      	streq	r2, [r6, #0]
 80013e6:	605a      	strne	r2, [r3, #4]
 80013e8:	e7ec      	b.n	80013c4 <_malloc_r+0xa0>
 80013ea:	4623      	mov	r3, r4
 80013ec:	6864      	ldr	r4, [r4, #4]
 80013ee:	e7b2      	b.n	8001356 <_malloc_r+0x32>
 80013f0:	4634      	mov	r4, r6
 80013f2:	6876      	ldr	r6, [r6, #4]
 80013f4:	e7b9      	b.n	800136a <_malloc_r+0x46>
 80013f6:	230c      	movs	r3, #12
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4638      	mov	r0, r7
 80013fc:	f000 f84c 	bl	8001498 <__malloc_unlock>
 8001400:	e7a1      	b.n	8001346 <_malloc_r+0x22>
 8001402:	6025      	str	r5, [r4, #0]
 8001404:	e7de      	b.n	80013c4 <_malloc_r+0xa0>
 8001406:	bf00      	nop
 8001408:	200003a4 	.word	0x200003a4

0800140c <_realloc_r>:
 800140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001410:	4680      	mov	r8, r0
 8001412:	4614      	mov	r4, r2
 8001414:	460e      	mov	r6, r1
 8001416:	b921      	cbnz	r1, 8001422 <_realloc_r+0x16>
 8001418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800141c:	4611      	mov	r1, r2
 800141e:	f7ff bf81 	b.w	8001324 <_malloc_r>
 8001422:	b92a      	cbnz	r2, 8001430 <_realloc_r+0x24>
 8001424:	f7ff ff12 	bl	800124c <_free_r>
 8001428:	4625      	mov	r5, r4
 800142a:	4628      	mov	r0, r5
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001430:	f000 f838 	bl	80014a4 <_malloc_usable_size_r>
 8001434:	4284      	cmp	r4, r0
 8001436:	4607      	mov	r7, r0
 8001438:	d802      	bhi.n	8001440 <_realloc_r+0x34>
 800143a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800143e:	d812      	bhi.n	8001466 <_realloc_r+0x5a>
 8001440:	4621      	mov	r1, r4
 8001442:	4640      	mov	r0, r8
 8001444:	f7ff ff6e 	bl	8001324 <_malloc_r>
 8001448:	4605      	mov	r5, r0
 800144a:	2800      	cmp	r0, #0
 800144c:	d0ed      	beq.n	800142a <_realloc_r+0x1e>
 800144e:	42bc      	cmp	r4, r7
 8001450:	4622      	mov	r2, r4
 8001452:	4631      	mov	r1, r6
 8001454:	bf28      	it	cs
 8001456:	463a      	movcs	r2, r7
 8001458:	f7ff fed0 	bl	80011fc <memcpy>
 800145c:	4631      	mov	r1, r6
 800145e:	4640      	mov	r0, r8
 8001460:	f7ff fef4 	bl	800124c <_free_r>
 8001464:	e7e1      	b.n	800142a <_realloc_r+0x1e>
 8001466:	4635      	mov	r5, r6
 8001468:	e7df      	b.n	800142a <_realloc_r+0x1e>
	...

0800146c <_sbrk_r>:
 800146c:	b538      	push	{r3, r4, r5, lr}
 800146e:	4d06      	ldr	r5, [pc, #24]	; (8001488 <_sbrk_r+0x1c>)
 8001470:	2300      	movs	r3, #0
 8001472:	4604      	mov	r4, r0
 8001474:	4608      	mov	r0, r1
 8001476:	602b      	str	r3, [r5, #0]
 8001478:	f7ff f918 	bl	80006ac <_sbrk>
 800147c:	1c43      	adds	r3, r0, #1
 800147e:	d102      	bne.n	8001486 <_sbrk_r+0x1a>
 8001480:	682b      	ldr	r3, [r5, #0]
 8001482:	b103      	cbz	r3, 8001486 <_sbrk_r+0x1a>
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	bd38      	pop	{r3, r4, r5, pc}
 8001488:	200003ac 	.word	0x200003ac

0800148c <__malloc_lock>:
 800148c:	4801      	ldr	r0, [pc, #4]	; (8001494 <__malloc_lock+0x8>)
 800148e:	f000 b811 	b.w	80014b4 <__retarget_lock_acquire_recursive>
 8001492:	bf00      	nop
 8001494:	200003b0 	.word	0x200003b0

08001498 <__malloc_unlock>:
 8001498:	4801      	ldr	r0, [pc, #4]	; (80014a0 <__malloc_unlock+0x8>)
 800149a:	f000 b80c 	b.w	80014b6 <__retarget_lock_release_recursive>
 800149e:	bf00      	nop
 80014a0:	200003b0 	.word	0x200003b0

080014a4 <_malloc_usable_size_r>:
 80014a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014a8:	1f18      	subs	r0, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bfbc      	itt	lt
 80014ae:	580b      	ldrlt	r3, [r1, r0]
 80014b0:	18c0      	addlt	r0, r0, r3
 80014b2:	4770      	bx	lr

080014b4 <__retarget_lock_acquire_recursive>:
 80014b4:	4770      	bx	lr

080014b6 <__retarget_lock_release_recursive>:
 80014b6:	4770      	bx	lr

080014b8 <_init>:
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	bf00      	nop
 80014bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014be:	bc08      	pop	{r3}
 80014c0:	469e      	mov	lr, r3
 80014c2:	4770      	bx	lr

080014c4 <_fini>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	bf00      	nop
 80014c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ca:	bc08      	pop	{r3}
 80014cc:	469e      	mov	lr, r3
 80014ce:	4770      	bx	lr
